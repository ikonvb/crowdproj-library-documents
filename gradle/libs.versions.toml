[versions]
ktor = "2.3.12"
kermit = "2.0.3"
kotest = "5.9.1"
kotlin = "2.0.21"
muschko = "9.4.0"
exposed = "0.50.0"
logback = "1.5.3"
jackson = "2.16.1"
jvm-language = "21"
jvm-compiler = "17"
liquibase = "4.27.0"
coroutines = "1.9.0"
testcontainers = "1.19.7"
kotlinx-datetime = "0.5.0"
openapi-generator = "7.3.0"
kotlinx-serialization = "1.6.3"
binaryCompabilityValidator = "0.13.2"


[libraries]
db-exposed-core = { module = "org.jetbrains.exposed:exposed-core", version.ref = "exposed" }
db-exposed-dao = { module = "org.jetbrains.exposed:exposed-dao", version.ref = "exposed" }
db-exposed-jdbc = { module = "org.jetbrains.exposed:exposed-jdbc", version.ref = "exposed" }
cor = "com.crowdproj:kotlin-cor:0.6.0"
plugin-kotlin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
plugin-binaryCompatibilityValidator = { module = "org.jetbrains.kotlinx:binary-compatibility-validator", version.ref = "binaryCompabilityValidator" }
kotest-native = { module = "io.kotest:kotest-framework-engine", version.ref = "kotest" }

kotlinx-atomicfu = { module = "org.jetbrains.kotlinx:atomicfu", version = "0.23.2" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinx-datetime" }
kotlinx-serialization-core = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "kotlinx-serialization" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }
coroutines-jdk9 = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-jdk9", version.ref = "coroutines" }
coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }


jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
jackson-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
jackson-datatype = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }

# Databases
db-cache4k = "io.github.reactivecircus.cache4k:cache4k:0.13.0"

uuid = "com.benasher44:uuid:0.8.4"

# Logging
kermit = { module = "co.touchlab:kermit", version.ref = "kermit" }
logger-fluentd = { module = "org.fluentd:fluent-logger", version = "0.3.4" }
logback = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
logback-appenders = { module = "com.sndyuk:logback-more-appenders", version = "1.8.8" }
logback-logstash = { module = "net.logstash.logback:logstash-logback-encoder", version = "7.4" }

# Ktor
ktor-network = { module = "io.ktor:ktor-network", version.ref = "ktor" }
ktor-server-cio = { module = "io.ktor:ktor-server-cio", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-server-core = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }
ktor-server-cors = { module = "io.ktor:ktor-server-cors", version.ref = "ktor" }
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-server-test = { module = "io.ktor:ktor-server-test-host", version.ref = "ktor" }
ktor-server-yaml = { module = "io.ktor:ktor-server-config-yaml", version.ref = "ktor" }
ktor-server-websocket = { module = "io.ktor:ktor-server-websockets", version.ref = "ktor" }
ktor-server-calllogging = { module = "io.ktor:ktor-server-call-logging", version.ref = "ktor" }
ktor-serialization-jackson = { module = "io.ktor:ktor-serialization-jackson", version.ref = "ktor" }
ktor-client-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-server-headers-default = { module = "io.ktor:ktor-server-default-headers", version.ref = "ktor" }
ktor-server-headers-caching = { module = "io.ktor:ktor-server-caching-headers", version.ref = "ktor" }
ktor-server-negotiation = { module = "io.ktor:ktor-server-content-negotiation", version.ref = "ktor" }
ktor-serialization-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-server-headers-response = { module = "io.ktor:ktor-server-auto-head-response", version.ref = "ktor" }
db-postgres = "org.postgresql:postgresql:42.7.3"
kafka-client = { module = "org.apache.kafka:kafka-clients", version = "3.7.1" }

# Testing
kotest-property = { module = "io.kotest:kotest-property", version.ref = "kotest" }
mockito-kotlin = { module = "org.mockito.kotlin:mockito-kotlin", version = "5.2.1" }
kotest-junit5 = { module = "io.kotest:kotest-runner-junit5", version = "5.9.1" }
kotest-core = { module = "io.kotest:kotest-assertions-core", version = "5.9.1" }
kotest-datatest = { module = "io.kotest:kotest-framework-datatest", version.ref = "kotest" }
testcontainers-core = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
testcontainers-postgres = { module = "org.testcontainers:postgresql", version.ref = "testcontainers" }

# Liquidbase
liquibase-core = { module = "org.liquibase:liquibase-core", version.ref = "liquibase" }
liquibase-picocli = "info.picocli:picocli:4.7.5"
liquibase-snakeyml = "org.yaml:snakeyaml:2.0"


[bundles]
kotest = ["kotest-junit5", "kotest-core", "kotest-property"]
exposed = ["db-exposed-core", "db-exposed-dao", "db-exposed-jdbc"]


[plugins]
ktor = { id = "io.ktor.plugin", version.ref = "ktor" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
liquibase = { id = "org.liquibase.gradle", version = "2.2.2" }
shadowJar = { id = "com.github.johnrengelman.shadow", version = "8.1.1" }
crowdproj-generator = { id = "com.crowdproj.generator", version = "0.2.0" }

openapi-generator = { id = "org.openapi.generator", version.ref = "openapi-generator" }
kotlinx-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }

muschko-remote = { id = "com.bmuschko.docker-remote-api", version.ref = "muschko" }
muschko-java = { id = "com.bmuschko.docker-java-application", version.ref = "muschko" }
